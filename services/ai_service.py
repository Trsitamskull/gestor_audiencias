"""
Servicio de IA para autocompletar formularios de audiencias.
Utiliza OpenAI GPT para extraer informaci√≥n de texto libre con m√°xima precisi√≥n.
"""

import json
import re
from typing import Dict, Optional, Any
from datetime import datetime

try:
    import openai
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ùå Error: OpenAI no est√° instalado. Ejecuta: pip install openai")

try:
    from config.config import (
        OPENAI_API_KEY, OPENAI_MODEL, 
        ANONYMIZE_DATA, USE_FREE_TIER, SHOW_PRIVACY_WARNING
    )
    HAS_CONFIG = True
except ImportError:
    print("‚ùå Error: config.py no encontrado. Crea el archivo config/config.py con tu API key.")
    OPENAI_API_KEY = ""
    OPENAI_MODEL = "gpt-4o-mini"
    ANONYMIZE_DATA = False
    USE_FREE_TIER = False
    SHOW_PRIVACY_WARNING = True
    HAS_CONFIG = False

try:
    from utils.anonimizador import anonimizar_para_ia, restaurar_datos_ia
    HAS_ANONYMIZER = True
except ImportError:
    print("‚ö†Ô∏è Advertencia: Anonimizador no disponible")
    HAS_ANONYMIZER = False


class AIFormFiller:
    """Servicio para autocompletar formularios usando OpenAI exclusivamente."""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or OPENAI_API_KEY
        
        if not OPENAI_AVAILABLE:
            raise Exception("OpenAI no est√° disponible. Instala con: pip install openai")
        
        if not self.api_key:
            raise Exception("API Key de OpenAI requerida. Configura config.py")
        
        # Inicializar cliente OpenAI
        self.client = OpenAI(api_key=self.api_key)
        self.model = OPENAI_MODEL
        print(f"ÔøΩ OpenAI configurado correctamente - Modelo: {self.model}")
    
    def extract_audiencia_info(self, texto: str) -> Dict[str, Any]:
        """
        Extrae informaci√≥n de audiencias usando OpenAI GPT con anonimizaci√≥n opcional.
        
        Args:
            texto (str): Texto libre con informaci√≥n de la audiencia
            
        Returns:
            Dict con los campos extra√≠dos para el formulario
        """
        
        try:
            texto_para_ia = texto
            mapeo_reverso = {}
            
            # Aplicar anonimizaci√≥n si est√° habilitada
            if ANONYMIZE_DATA and HAS_ANONYMIZER:
                print("üîí Anonimizando datos sensibles...")
                texto_para_ia, mapeo_reverso = anonimizar_para_ia(texto)
                print("‚úÖ Datos anonimizados para procesamiento seguro")
            
            # Procesar con OpenAI
            resultado = self._extract_with_openai(texto_para_ia)
            
            # Restaurar datos reales si se anonimiz√≥
            if ANONYMIZE_DATA and HAS_ANONYMIZER and mapeo_reverso:
                print("üîì Restaurando datos reales...")
                resultado = restaurar_datos_ia(resultado, mapeo_reverso)
                print("‚úÖ Datos reales restaurados")
            
            print("ü§ñ Procesado con OpenAI" + (" (con anonimizaci√≥n)" if ANONYMIZE_DATA else ""))
            return resultado
            
        except Exception as e:
            print(f"‚ùå Error OpenAI: {e}")
            # Devolver estructura vac√≠a en caso de error
            return {
                "radicado": "",
                "tipo_audiencia": "",
                "fecha": "",
                "hora": "",
                "minuto": "",
                "juzgado": "",
                "se_realizo": "",
                "motivos": "",
                "observaciones": f"Error al procesar: {str(e)}",
                "demandante": "",
                "demandado": ""
            }
    
    def _extract_with_openai(self, texto: str) -> Dict[str, Any]:
        """
        Extracci√≥n usando OpenAI GPT - Modo de alta precisi√≥n.
        """
        
        prompt = f"""
Eres un asistente especializado en extraer informaci√≥n de textos judiciales colombianos.

IMPORTANTE: Responde SOLO con un objeto JSON v√°lido, sin texto adicional.

Extrae la siguiente informaci√≥n del texto:

TEXTO A ANALIZAR:
"{texto}"

ESTRUCTURA JSON REQUERIDA:
{{
    "radicado": "n√∫mero de radicado COMPLETO (incluye TODOS los n√∫meros y guiones)",
    "tipo_audiencia": "tipo espec√≠fico de audiencia",
    "fecha": "DD/MM/YYYY",
    "hora": "HH",
    "minuto": "MM", 
    "juzgado": "nombre completo del juzgado o tribunal",
    "se_realizo": "SI" o "NO",
    "motivos": "un_solo_motivo_principal",
    "observaciones": "informaci√≥n adicional relevante y TODOS los motivos si hay m√∫ltiples",
    "demandante": "nombre del demandante/actor/solicitante",
    "demandado": "nombre del demandado/accionado"
}}

REGLAS CR√çTICAS PARA RADICADO:
1. BUSCA n√∫meros largos tipo: "2024-00145-001", "25754315800420240012300", "2023-001234-00"
2. BUSCA tambi√©n nombres de personas en el documento
3. COMBINA nombre + radicado en UNA SOLA l√≠nea separados por " - "
4. Ejemplo: "MAR√çA GONZ√ÅLEZ P√âREZ - 2024-00145-001"
5. Si solo encuentras radicado sin nombre: solo pon el n√∫mero
6. Si solo encuentras nombre sin radicado: solo pon el nombre
7. FORMATO PREFERIDO: "NOMBRE COMPLETO - N√öMERO_RADICADO_COMPLETO"

OTRAS REGLAS:
- Para fechas en texto, convi√©rtelas a formato DD/MM/YYYY
- Para horas AM/PM, convierte a formato 24h (ej: 2:30 PM = hora: "14", minuto: "30")
- Si no encuentras alg√∫n dato, usa cadena vac√≠a "" o array vac√≠o []
- El campo "se_realizo" debe ser "SI" si la audiencia se realiz√≥, "NO" si no
- Para "motivos": Si la audiencia NO se realiz√≥, identifica SOLO EL PRIMER motivo principal:
  * "juez" - si falt√≥ el juez, por el juez, inasistencia del juez
  * "fiscal√≠a" - si falt√≥ la fiscal√≠a, por fiscal√≠a, inasistencia fiscal√≠a  
  * "usuario" - si falt√≥ el usuario, demandante, actor, solicitante
  * "inpec" - si falt√≥ INPEC, instituto penitenciario
  * "v√≠ctima" - si falt√≥ la v√≠ctima, por la v√≠ctima
  * "icbf" - si falt√≥ ICBF, instituto bienestar familiar
  * "defensor confianza" - si falt√≥ defensor de confianza, abogado privado
  * "defensor p√∫blico" - si falt√≥ defensor p√∫blico, defensor√≠a
  IMPORTANTE: Solo selecciona UN motivo (el m√°s importante). Si hay m√∫ltiples motivos, menci√≥nalos todos en "observaciones".
- Para "observaciones": Incluye detalles adicionales y TODOS los motivos de no realizaci√≥n si hay m√∫ltiples.
- Identifica tipos espec√≠ficos: Audiencia De Conciliaci√≥n, Audiencia Concentrada, etc.
- Para juzgados, incluye la designaci√≥n completa
- Extrae nombres completos de demandante y demandado si est√°n presentes
"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Eres un experto en procesamiento de documentos judiciales colombianos. Responde solo con JSON v√°lido."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.1  # Baja temperatura para mayor precisi√≥n
            )
            
            resultado_texto = response.choices[0].message.content
            if resultado_texto:
                resultado_texto = resultado_texto.strip()
            else:
                raise Exception("Respuesta vac√≠a de OpenAI")
            
            # Limpiar posibles caracteres markdown
            if resultado_texto.startswith("```json"):
                resultado_texto = resultado_texto[7:]
            if resultado_texto.endswith("```"):
                resultado_texto = resultado_texto[:-3]
            
            resultado = json.loads(resultado_texto)
            
            # Validar y normalizar resultado
            campos_requeridos = ["radicado", "tipo_audiencia", "fecha", "hora", "minuto", 
                               "juzgado", "se_realizo", "motivos", "observaciones", 
                               "demandante", "demandado"]
            
            for campo in campos_requeridos:
                if campo not in resultado:
                    resultado[campo] = ""
            
            return resultado
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Error parsing JSON de OpenAI: {e}")
            raise Exception(f"Error en formato JSON: {e}")
        except Exception as e:
            print(f"‚ùå Error OpenAI: {e}")
            raise Exception(f"Error de OpenAI: {e}")


# Instancia global del servicio
ai_service = AIFormFiller()
